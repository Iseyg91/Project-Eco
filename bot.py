import discord
from discord.ext import commands, tasks
from discord import app_commands, Embed, ButtonStyle, ui
from discord.ui import Button, View, Select, Modal, TextInput, button
from discord.ui import Modal, TextInput, Button, View
from discord.utils import get
from discord import TextStyle
from functools import wraps
import os
from discord import app_commands, Interaction, TextChannel, Role
import io
import random
import asyncio
import time
import re
import subprocess
import sys
import math
import traceback
from keep_alive import keep_alive
from datetime import datetime, timedelta
from collections import defaultdict, deque
import pymongo
from pymongo import MongoClient
from motor.motor_asyncio import AsyncIOMotorClient
import psutil
import pytz
import platform
from discord.ui import Select, View
from typing import Optional

token = os.environ['ETHERYA']
intents = discord.Intents.all()
start_time = time.time()
bot = commands.Bot(command_prefix="!!", intents=intents, help_command=None)

#Configuration du Bot:
# --- ID Owner Bot ---
ISEY_ID = 792755123587645461
GUILD_ID = 1359963854200639498

# --- ID Staff Serveur Delta ---
PROJECT_DELTA = 1359963854200639498
STAFF_PROJECT = 1359963854422933876
STAFF_DELTA = 1362339333658382488
ALERT_CHANNEL_ID = 1361329246236053586
ALERT_NON_PREM_ID = 1364557116572172288
STAFF_ROLE_ID = 1362339195380568085

# --- ID Sanctions Serveur Delta ---
WARN_LOG_CHANNEL = 1362435917104681230
UNWARN_LOG_CHANNEL = 1362435929452707910
BLACKLIST_LOG_CHANNEL = 1362435853997314269
UNBLACKLIST_LOG_CHANNEL = 1362435888826814586

# --- ID Gestion Delta ---
SUPPORT_ROLE_ID = 1359963854422933876
SALON_REPORT_ID = 1361362788672344290
ROLE_REPORT_ID = 1362339195380568085
TRANSCRIPT_CHANNEL_ID = 1361669998665535499

# --- ID Gestion Clients Delta ---
LOG_CHANNEL_RETIRE_ID = 1360864806957092934
LOG_CHANNEL_ID = 1360864790540582942

# --- ID Delta2 ---
ECO_ROLES_VIP = [1359963854402228315, 1361307897287675989]

def get_log_channel(guild, key):
    log_channel_id = log_channels.get(key)
    if log_channel_id:
        return guild.get_channel(log_channel_id)
    return None

# Fonction pour cr√©er des embeds format√©s
def create_embed(title, description, color=discord.Color.blue(), footer_text=""):
    embed = discord.Embed(title=title, description=description, color=color)
    embed.set_footer(text=footer_text)
    return embed

# Connexion MongoDB
mongo_uri = os.getenv("MONGO_DB")  # URI de connexion √† MongoDB
print("Mongo URI :", mongo_uri)  # Cela affichera l'URI de connexion (assure-toi de ne pas laisser cela en prod)
client = MongoClient(mongo_uri)
db2 = client['DELTA-ECO']

# Collections
#--------------------------------------------------------------- DB2
collection28 = db2['ether_eco']  #Stock les Bal
collection29 = db2['ether_daily']  #Stock les cd de daily
collection30 = db2['ether_slut']  #Stock les cd de slut
collection31 = db2['ether_crime']  #Stock les cd de slut
collection32 = db2['ether_collect'] #Stock les cd de collect
collection33 = db2['ether_work'] #Stock les cd de Work
collection34 = db2['ether_inventory'] #Stock les inventaires
collection35 = db2['info_cf'] #Stock les Info du cf
collection36 = db2['info_logs'] #Stock le Salon logs
collection37 = db2['info_bj'] #Stock les Info du Bj
collection38 = db2['info_rr'] #Stock les Info de RR
collection39 = db2['info_roulette'] #Stock les Info de SM
collection40 = db2['info_sm'] #Stock les Info de SM
collection41 = db2['ether_rob'] #Stock les cd de Rob
collection42 = db2['anti_rob'] #Stock les r√¥le anti-rob
collection43 = db2['daily_badge'] #Stock les cd des daily badge

def get_cf_config(guild_id):
    config = collection35.find_one({"guild_id": guild_id})
    if not config:
        # Valeurs par d√©faut
        config = {
            "guild_id": guild_id,
            "start_chance": 50,
            "max_chance": 100,
            "max_bet": 20000
        }
        collection35.insert_one(config)
    return config

async def log_eco_channel(bot, guild_id, user, action, amount, balance_before, balance_after, note=""):
    config = collection36.find_one({"guild_id": guild_id})
    channel_id = config.get("eco_log_channel") if config else None

    if not channel_id:
        return  # Aucun salon configur√©

    channel = bot.get_channel(channel_id)
    if not channel:
        return  # Salon introuvable (peut avoir √©t√© supprim√©)

    embed = discord.Embed(
        title="üí∏ Log √âconomique",
        color=discord.Color.gold(),
        timestamp=datetime.utcnow()
    )
    embed.set_author(name=str(user), icon_url=user.avatar.url if user.avatar else None)
    embed.add_field(name="Action", value=action, inline=True)
    embed.add_field(name="Montant", value=f"{amount} <:ecoEther:1341862366249357374>", inline=True)
    embed.add_field(name="Solde", value=f"Avant: {balance_before}\nApr√®s: {balance_after}", inline=False)

    if note:
        embed.add_field(name="Note", value=note, inline=False)

    await channel.send(embed=embed)

# Fonction pour r√©cup√©rer les donn√©es d'un utilisateur
def get_user_eco(guild_id, user_id):
    user_data = collection28.find_one({"guild_id": guild_id, "user_id": user_id})
    if not user_data:
        # Si l'utilisateur n'a pas encore de donn√©es, on les cr√©e
        collection10.insert_one({
            "guild_id": guild_id,
            "user_id": user_id,
            "coins": 0,
            "last_daily": None
        })
        return {"coins": 0, "last_daily": None}
    return user_data

def load_guild_settings(guild_id):
    # Charger les donn√©es de la collection principale
    ether_eco_data = collection28.find_one({"guild_id": guild_id}) or {}
    ether_daily_data = collection29.find_one({"guild_id": guild_id}) or {}
    ether_slut_data = collection30.find_one({"guild_id": guild_id}) or {}
    ether_crime_data = collection31.find_one({"guild_id": guild_id}) or {}
    ether_collect_data = collection32.find_one({"guild_id": guild_id}) or {}
    ether_work_data = collection33.find_one({"guild_id": guild_id}) or {}
    ether_inventory_data = collection34.find_one({"guild_id": guild_id}) or {}
    info_cf_data = collection35.find_one({"guild_id": guild_id}) or {}
    info_logs_data = collection36.find_one({"guild_id": guild_id}) or {}
    info_bj_data = collection37.find_one({"guild_id": guild_id}) or {}
    info_rr_data = collection38.find_one({"guild_id": guild_id}) or {}
    info_roulette_data = collection39.find_one({"guild_id": guild_id}) or {}
    info_sm_data = collection40.find_one({"guild_id": guild_id}) or {}
    ether_rob_data = collection41.find_one({"guild_id": guild_id}) or {}
    anti_rob_data = collection42.find_one({"guild_id": guild_id}) or {}
    ether_daily_badge_data = collection43.find_one({"guild_id": guild_id}) or {}
    
    # D√©bogage : Afficher les donn√©es de setup
    print(f"Setup data for guild {guild_id}: {setup_data}")

    combined_data = {
        "ether_eco": ether_eco_data,
        "ether_daily": ether_daily_data,
        "ether_slut": ether_slut_data,
        "ether_crime": ether_crime_data,
        "ether_collect": ether_collect_data,
        "ether_work": ether_work_data,
        "ether_inventory": ether_inventory_data,
        "info_cf": info_cf_data,
        "info_logs": info_logs_data,
        "info_bj": info_bj_data,
        "info_rr": info_rr_data,
        "info_roulette": info_roulette_data,
        "info_sm": info_sm_data,
        "ether_rob": ether_rob_data,
        "anti_rob": anti_rob_data,
        "daily_badge": daily_badge_data
    }

    return combined_data
    
# Dictionnaire pour stocker les param√®tres de chaque serveur
GUILD_SETTINGS = {}

TOP_ROLES = {
    1: 1363923497885237298,  # ID du r√¥le Top 1
    2: 1363923494504501510,  # ID du r√¥le Top 2
    3: 1363923356688056401,  # ID du r√¥le Top 3
}

# Config des r√¥les
COLLECT_ROLES_CONFIG = [
    {
        "role_id": 1359963854402228315, #Membres
        "amount": 150,
        "cooldown": 3600,
        "auto": False,
        "target": "bank"
    },
        {
        "role_id": 1361307897287675989, #Membres
        "amount": 150,
        "cooldown": 3600,
        "auto": False,
        "target": "bank"
    },
    {
        "role_id": 1363969965572755537, #Nen Maudit
        "percent": -20,
        "cooldown": 7200,
        "auto": True,
        "target": "bank"
    },
]
#------------------------------------------------------------------------- Code Protection:
# --- Boucle auto-collecte (optimis√©e) ---
@tasks.loop(minutes=15)
async def auto_collect_loop():
    print("[Auto Collect] Lancement de la collecte automatique...")
    now = datetime.utcnow()

    for guild in bot.guilds:
        for config in COLLECT_ROLES_CONFIG:
            role = discord.utils.get(guild.roles, id=config["role_id"])
            if not role or not config["auto"]:
                continue

            # Parcourir uniquement les membres ayant le r√¥le
            for member in role.members:
                cd_data = collection32.find_one({
                    "guild_id": guild.id,
                    "user_id": member.id,
                    "role_id": role.id
                })
                last_collect = cd_data.get("last_collect") if cd_data else None

                if not last_collect or (now - last_collect).total_seconds() >= config["cooldown"]:
                    eco_data = collection28.find_one({
                        "guild_id": guild.id,
                        "user_id": member.id
                    }) or {"guild_id": guild.id, "user_id": member.id, "cash": 1500, "bank": 0}

                    eco_data.setdefault("cash", 0)
                    eco_data.setdefault("bank", 0)

                    before = eco_data[config["target"]]
                    if "amount" in config:
                        eco_data[config["target"]] += config["amount"]
                    elif "percent" in config:
                        eco_data[config["target"]] += eco_data[config["target"]] * (config["percent"] / 100)

                    collection28.update_one(
                        {"guild_id": guild.id, "user_id": member.id},
                        {"$set": {config["target"]: eco_data[config["target"]]}},
                        upsert=True
                    )

                    collection32.update_one(
                        {"guild_id": guild.id, "user_id": member.id, "role_id": role.id},
                        {"$set": {"last_collect": now}},
                        upsert=True
                    )

                    after = eco_data[config["target"]]
                    await log_eco_channel(bot, guild.id, member, f"Auto Collect ({role.name})", config.get("amount", config.get("percent")), before, after, note="Collect automatique")

# --- Boucle Top Roles (optimis√©e) ---
@tasks.loop(minutes=15)
async def update_top_roles():
    print("[Top Roles] Mise √† jour des r√¥les de top...")
    for guild in bot.guilds:
        if guild.id != GUILD_ID:  # On ne traite qu'un seul serveur
            continue

        all_users_data = list(collection28.find({"guild_id": guild.id}))
        sorted_users = sorted(all_users_data, key=lambda u: u.get("cash", 0) + u.get("bank", 0), reverse=True)
        top_users = sorted_users[:3]

        # R√©cup√©rer une seule fois tous les membres n√©cessaires
        members = {member.id: member async for member in guild.fetch_members(limit=None)}

        for rank, user_data in enumerate(top_users, start=1):
            user_id = user_data["user_id"]
            role_id = TOP_ROLES[rank]
            role = discord.utils.get(guild.roles, id=role_id)
            if not role:
                print(f"R√¥le manquant : {role_id} dans {guild.name}")
                continue

            member = members.get(user_id)
            if not member:
                print(f"Membre {user_id} non trouv√© dans {guild.name}")
                continue

            if role not in member.roles:
                await member.add_roles(role)
                print(f"Ajout√© {role.name} √† {member.display_name}")

        # Nettoyer les r√¥les qui ne doivent plus √™tre l√†
        for rank, role_id in TOP_ROLES.items():
            role = discord.utils.get(guild.roles, id=role_id)
            if not role:
                continue
            for member in role.members:
                if member.id not in [u["user_id"] for u in top_users]:
                    await member.remove_roles(role)
                    print(f"Retir√© {role.name} de {member.display_name}")

# √âv√©nement quand le bot est pr√™t
@bot.event
async def on_ready():
    print(f"‚úÖ Le bot {bot.user} est maintenant connect√© ! (ID: {bot.user.id})")

    bot.uptime = time.time()

    # D√©marrer les t√¢ches de fond
    update_top_roles.start()
    auto_collect_loop.start()

    guild_count = len(bot.guilds)
    member_count = sum(guild.member_count for guild in bot.guilds)

    print(f"\nüìä **Statistiques du bot :**")
    print(f"‚û°Ô∏è **Serveurs** : {guild_count}")
    print(f"‚û°Ô∏è **Utilisateurs** : {member_count}")

    activity_types = [
        discord.Activity(type=discord.ActivityType.streaming, name="Project : Delta"),
    ]

    status_types = [discord.Status.online, discord.Status.idle, discord.Status.dnd]

    await bot.change_presence(
        activity=random.choice(activity_types),
        status=random.choice(status_types)
    )

    print(f"\nüéâ **{bot.user}** est maintenant connect√© et affiche ses statistiques dynamiques avec succ√®s !")
    print("üìå Commandes disponibles üòä")
    for command in bot.commands:
        print(f"- {command.name}")

    try:
        synced = await bot.tree.sync()
        print(f"‚úÖ Commandes slash synchronis√©es : {[cmd.name for cmd in synced]}")
    except Exception as e:
        print(f"‚ùå Erreur de synchronisation des commandes slash : {e}")

        for guild in bot.guilds:
            GUILD_SETTINGS[guild.id] = load_guild_settings(guild.id)

@bot.event
async def on_error(event, *args, **kwargs):
    print(f"Une erreur s'est produite : {event}")
    embed = discord.Embed(
        title="‚ùó Erreur inattendue",
        description="Une erreur s'est produite lors de l'ex√©cution de la commande. Veuillez r√©essayer plus tard.",
        color=discord.Color.red()
    )
    
    # V√©rifie si args[0] est une Interaction
    if isinstance(args[0], discord.Interaction):
        await args[0].response.send_message(embed=embed)
    elif isinstance(args[0], discord.Message):
        # Si c'est un message, envoie l'embed dans le canal du message
        await args[0].channel.send(embed=embed)
    elif isinstance(args[0], discord.abc.GuildChannel):
        # Si c'est un canal de type GuildChannel, assure-toi que c'est un canal textuel
        if isinstance(args[0], discord.TextChannel):
            await args[0].send(embed=embed)
        else:
            # Si c'est un autre type de canal (comme un canal vocal), essaye de rediriger le message vers un canal textuel sp√©cifique
            text_channel = discord.utils.get(args[0].guild.text_channels, name='ton-salon-textuel')
            if text_channel:
                await text_channel.send(embed=embed)
            else:
                print("Erreur : Aucun salon textuel trouv√© pour envoyer l'embed.")
    else:
        print("Erreur : Le type de l'objet n'est pas pris en charge pour l'envoi du message.")

#------------------------------------------------------------------------- Commande Mention ainsi que Commandes d'Administration : Detections de Mots sensible et Mention

@bot.event
async def on_message(message):
    try:
        if message.author.bot or message.guild is None:
            return

        user_id = str(message.author.id)

        # üí∏ 1. Gain automatique de cash √† chaque message
        try:
            from random import randint

            gain = randint(1, 5)  # Ajuste ici le gain minimal/maximal
            user_data = collection28.find_one({"guild_id": message.guild.id, "user_id": message.author.id})

            if not user_data:
                # Cr√©e l'entr√©e si elle n'existe pas
                user_data = {"guild_id": message.guild.id, "user_id": message.author.id, "cash": gain, "bank": 0}
                collection28.insert_one(user_data)
            else:
                # Met √† jour le cash
                collection28.update_one(
                    {"guild_id": message.guild.id, "user_id": message.author.id},
                    {"$inc": {"cash": gain}}
                )
        except Exception as e:
            print(f"Erreur lors du gain de cash automatique : {e}")

        # ‚úÖ 2. Traitement normal
        await bot.process_commands(message)

    except Exception as e:
        print(f"Erreur dans on_message : {e}")

#-------------------------------------------------------------------------------- Eco:

@bot.hybrid_command( 
    name="balance",
    aliases=["bal", "money"],
    description="Affiche ta balance ou celle d'un autre utilisateur."
)
async def bal(ctx: commands.Context, user: discord.User = None):
    if ctx.guild is None:
        return await ctx.send("Cette commande ne peut √™tre utilis√©e qu'en serveur.")

    user = user or ctx.author
    guild_id = ctx.guild.id
    user_id = user.id

    # Utilisation de collection28
    def get_or_create_user_data(guild_id: int, user_id: int):
        data = collection28.find_one({"guild_id": guild_id, "user_id": user_id})
        if not data:
            data = {"guild_id": guild_id, "user_id": user_id, "cash": 0, "bank": 0}
            collection28.insert_one(data)
        return data

    data = get_or_create_user_data(guild_id, user_id)
    cash = data.get("cash", 0)
    bank = data.get("bank", 0)
    total = cash + bank

    # Classement des utilisateurs dans collection28
    all_users_data = list(collection28.find({"guild_id": guild_id}))
    sorted_users = sorted(
        all_users_data,
        key=lambda u: u.get("cash", 0) + u.get("bank", 0),
        reverse=True
    )
    rank = next((i + 1 for i, u in enumerate(sorted_users) if u["user_id"] == user_id), None)

    role_name = f"Tu as le r√¥le **[ùë∫◊•] Top {rank}** ! F√©licitations !" if rank in TOP_ROLES else None

    emoji_currency = "<:emoji_48:1362489008130621542>"

    def ordinal(n: int) -> str:
        return f"{n}{'st' if n == 1 else 'nd' if n == 2 else 'rd' if n == 3 else 'th'}"

    # Cr√©ation de l'embed
    embed = discord.Embed(color=discord.Color.blue())
    embed.set_author(name=user.display_name, icon_url=user.display_avatar.url)

    # Ajout du champ classement seulement si rank existe
    if rank:
        embed.add_field(
            name="Leaderboard Rank",
            value=f"{ordinal(rank)}",
            inline=False
        )

    # Champ des finances (titre invisible)
    embed.add_field(
        name="Ton Solde:",
        value=(
            f"**Cash :** {int(cash):,} {emoji_currency}\n"
            f"**Banque :** {int(bank):,} {emoji_currency}\n"
            f"**Total :** {int(total):,} {emoji_currency}"
        ),
        inline=False
    )

    await ctx.send(embed=embed)

@bot.hybrid_command(name="deposit", aliases=["dep"], description="D√©pose de l'argent de ton portefeuille vers ta banque.")
@app_commands.describe(amount="Montant √† d√©poser (ou 'all')")
async def deposit(ctx: commands.Context, amount: str):
    user = ctx.author
    guild_id = ctx.guild.id
    user_id = user.id

    data = collection28.find_one({"guild_id": guild_id, "user_id": user_id}) or {"cash": 0, "bank": 0}
    cash = data.get("cash", 0)
    bank = data.get("bank", 0)

    # Cas "all"
    if amount.lower() == "all":
        if cash == 0:
            embed = discord.Embed(
                description=f"<:classic_x_mark:1362711858829725729> {user.mention}, tu n'as rien √† d√©poser.",
                color=discord.Color.red()
            )
            embed.set_author(name=user.display_name, icon_url=user.display_avatar.url)
            return await ctx.send(embed=embed)
        deposit_amount = int(cash)

    else:
        # V√©rification si le montant est valide (positif et num√©rique)
        if not amount.isdigit() or int(amount) <= 0:
            embed = discord.Embed(
                description=f"<:classic_x_mark:1362711858829725729> {user.mention}, montant invalide. Utilise un nombre positif ou `all`.",
                color=discord.Color.red()
            )
            embed.set_author(name=user.display_name, icon_url=user.display_avatar.url)
            return await ctx.send(embed=embed)

        deposit_amount = int(amount)

        # V√©rifier si l'utilisateur a suffisamment d'argent
        if deposit_amount > cash:
            embed = discord.Embed(
                description=(
                    f"<:classic_x_mark:1362711858829725729> {user.mention}, tu n'as pas assez de cash √† d√©poser. "
                    f"Tu as actuellement <:emoji_48:1362489008130621542> **{int(cash):,}** dans ton portefeuille."
                ),
                color=discord.Color.red()
            )
            embed.set_author(name=user.display_name, icon_url=user.display_avatar.url)
            return await ctx.send(embed=embed)

    # Mise √† jour des donn√©es
    collection28.update_one(
        {"guild_id": guild_id, "user_id": user_id},
        {"$inc": {"cash": -deposit_amount, "bank": deposit_amount}},
        upsert=True
    )

    # Embed de succ√®s
    embed = discord.Embed(
        description=f"<:Check:1362710665663615147> Tu as d√©pos√© <:emoji_48:1362489008130621542> **{int(deposit_amount):,}** dans ta banque !",
        color=discord.Color.green()
    )
    embed.set_author(name=user.display_name, icon_url=user.display_avatar.url)

    await ctx.send(embed=embed)

@bot.hybrid_command(name="withdraw", aliases=["with"], description="Retire de l'argent de ta banque vers ton portefeuille.")
async def withdraw(ctx: commands.Context, amount: str):
    user = ctx.author
    guild_id = ctx.guild.id
    user_id = user.id

    # Chercher les donn√©es actuelles
    data = collection28.find_one({"guild_id": guild_id, "user_id": user_id}) or {"cash": 0, "bank": 0}
    cash = data.get("cash", 0)
    bank = data.get("bank", 0)

    # G√©rer le cas "all"
    if amount.lower() == "all":
        if bank == 0:
            embed = discord.Embed(
                description="üí∏ Tu n'as rien √† retirer.",
                color=discord.Color.red()
            )
            embed.set_author(name=user.display_name, icon_url=user.display_avatar.url)
            return await ctx.send(embed=embed)
        withdrawn_amount = int(bank)
    else:
        # V√©rifie que c'est un nombre valide
        if not amount.isdigit() or int(amount) <= 0:
            embed = discord.Embed(
                description="‚ùå Montant invalide. Utilise un nombre positif ou `all`.",
                color=discord.Color.red()
            )
            embed.set_author(name=user.display_name, icon_url=user.display_avatar.url)
            return await ctx.send(embed=embed)

        withdrawn_amount = int(amount)

        if withdrawn_amount > bank:
            embed = discord.Embed(
                description=(
                    f"<:classic_x_mark:1362711858829725729> Tu n'as pas autant √† retirer. "
                    f"Tu as actuellement <:emoji_48:1362489008130621542> **{int(bank):,}** dans ta banque."
                ),
                color=discord.Color.red()
            )
            embed.set_author(name=user.display_name, icon_url=user.display_avatar.url)
            return await ctx.send(embed=embed)

    # Mise √† jour dans la base de donn√©es
    collection28.update_one(
        {"guild_id": guild_id, "user_id": user_id},
        {"$inc": {"cash": withdrawn_amount, "bank": -withdrawn_amount}},
        upsert=True
    )

    # Cr√©ation de l'embed de succ√®s
    embed = discord.Embed(
        description=f"<:Check:1362710665663615147> Tu as retir√© <:emoji_48:1362489008130621542> **{int(withdrawn_amount):,}** de ta banque !",
        color=discord.Color.green()
    )
    embed.set_author(name=user.display_name, icon_url=user.display_avatar.url)

    await ctx.send(embed=embed)

@bot.hybrid_command(name="add-money", description="Ajoute de l'argent √† un utilisateur (r√©serv√© aux administrateurs).")
@app_commands.describe(
    user="L'utilisateur √† cr√©diter",
    amount="Le montant √† ajouter",
    location="Choisis entre cash ou bank"
)
@app_commands.choices(location=[
    app_commands.Choice(name="Cash", value="cash"),
    app_commands.Choice(name="Bank", value="bank"),
])
@commands.has_permissions(administrator=True)
async def add_money(ctx: commands.Context, user: discord.User, amount: int, location: app_commands.Choice[str]):
    if amount <= 0:
        return await ctx.send("‚ùå Le montant doit √™tre sup√©rieur √† 0.")

    guild_id = ctx.guild.id
    user_id = user.id
    field = location.value

    # R√©cup√©ration du solde actuel
    data = collection28.find_one({"guild_id": guild_id, "user_id": user_id}) or {"cash": 0, "bank": 0}
    balance_before = int(data.get(field, 0))

    # Mise √† jour du solde
    collection28.update_one(
        {"guild_id": guild_id, "user_id": user_id},
        {"$inc": {field: amount}},
        upsert=True
    )

    balance_after = balance_before + amount

    # Log dans le salon √©conomique
    await log_eco_channel(
        bot,
        guild_id,
        user,
        "Ajout d'argent",
        int(amount),
        balance_before,
        balance_after,
        f"Ajout de {int(amount):,} <:emoji_48:1362489008130621542> dans le compte {field} de {user.mention} par {ctx.author.mention}."
    )

    # Embed de confirmation
    embed = discord.Embed(
        title="‚úÖ Ajout effectu√© avec succ√®s !",
        description=f"**{int(amount):,} <:emoji_48:1362489008130621542>** ont √©t√© ajout√©s √† la **{field}** de {user.mention}.",
        color=discord.Color.green()
    )
    embed.set_footer(text=f"Action r√©alis√©e par {ctx.author}", icon_url=ctx.author.display_avatar.url)

    await ctx.send(embed=embed)

# Gestion des erreurs de permissions
@add_money.error
async def add_money_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.send("üö´ Tu n'as pas la permission d'utiliser cette commande.")
    else:
        await ctx.send("‚ùå Une erreur est survenue lors de l'ex√©cution de la commande.")

@bot.hybrid_command(name="remove-money", description="Retire de l'argent √† un utilisateur.")
@app_commands.describe(user="L'utilisateur cibl√©", amount="Le montant √† retirer", location="Choisis entre cash ou bank")
@app_commands.choices(location=[
    app_commands.Choice(name="Cash", value="cash"),
    app_commands.Choice(name="Bank", value="bank"),
])
@commands.has_permissions(administrator=True)
async def remove_money(ctx: commands.Context, user: discord.User, amount: int, location: app_commands.Choice[str]):
    if amount <= 0:
        return await ctx.send("‚ùå Le montant doit √™tre sup√©rieur √† 0.")

    guild_id = ctx.guild.id
    user_id = user.id
    field = location.value

    # R√©cup√©ration du solde actuel
    data = collection28.find_one({"guild_id": guild_id, "user_id": user_id}) or {"cash": 0, "bank": 0}
    current_balance = int(data.get(field, 0))
    balance_before = current_balance
    balance_after = balance_before - amount

    # Mise √† jour du solde (peut devenir n√©gatif)
    collection28.update_one(
        {"guild_id": guild_id, "user_id": user_id},
        {"$inc": {field: -amount}},
        upsert=True
    )

    # Log dans le salon √©co
    await log_eco_channel(
        bot,
        guild_id,
        user,
        "Retrait d'argent",
        -int(amount),
        balance_before,
        balance_after,
        f"Retrait de {int(amount):,} <:emoji_48:1362489008130621542> dans le compte {field} de {user.mention} par {ctx.author.mention}."
    )

    # Embed confirmation
    embed = discord.Embed(
        title="‚úÖ Retrait effectu√© avec succ√®s !",
        description=f"**{int(amount):,} <:emoji_48:1362489008130621542>** a √©t√© retir√© de la **{field}** de {user.mention}.\nNouveau solde : **{balance_after:,}** <:emoji_48:1362489008130621542>",
        color=discord.Color.green()
    )
    embed.set_footer(text=f"Action r√©alis√©e par {ctx.author}", icon_url=ctx.author.display_avatar.url)

    await ctx.send(embed=embed)

# Gestion des erreurs
@remove_money.error
async def remove_money_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.send("‚ùå Tu dois √™tre administrateur pour utiliser cette commande.")
    else:
        await ctx.send("‚ùå Une erreur est survenue.")

@bot.hybrid_command(name="set-money", description="D√©finit un montant exact dans le cash ou la bank d‚Äôun utilisateur.")
@app_commands.describe(user="L'utilisateur cibl√©", amount="Le montant √† d√©finir", location="Choisis entre cash ou bank")
@app_commands.choices(location=[
    app_commands.Choice(name="Cash", value="cash"),
    app_commands.Choice(name="Bank", value="bank"),
])
@commands.has_permissions(administrator=True)
async def set_money(ctx: commands.Context, user: discord.User, amount: int, location: app_commands.Choice[str]):
    if amount < 0:
        return await ctx.send("‚ùå Le montant ne peut pas √™tre n√©gatif.")

    guild_id = ctx.guild.id
    user_id = user.id
    field = location.value

    # R√©cup√©ration du solde actuel
    data = collection28.find_one({"guild_id": guild_id, "user_id": user_id}) or {"cash": 0, "bank": 0}
    balance_before = int(data.get(field, 0))

    # Mise √† jour de la base de donn√©es
    collection28.update_one(
        {"guild_id": guild_id, "user_id": user_id},
        {"$set": {field: int(amount)}},
        upsert=True
    )

    # Log dans le salon de logs √©conomiques
    await log_eco_channel(
        bot,
        guild_id,
        user,
        "D√©finition du solde",
        int(amount) - balance_before,
        balance_before,
        int(amount),
        f"Le solde du compte `{field}` de {user.mention} a √©t√© d√©fini √† {int(amount):,} <:emoji_48:1362489008130621542> par {ctx.author.mention}."
    )

    # Cr√©ation de l'embed
    embed = discord.Embed(
        title=f"{user.display_name} - {user.name}",
        description=f"Le montant de **{field}** de {user.mention} a √©t√© d√©fini √† **{int(amount):,} <:emoji_48:1362489008130621542>**.",
        color=discord.Color.green()
    )
    embed.set_author(name=user.display_name, icon_url=user.display_avatar.url)
    embed.set_footer(text=f"Action r√©alis√©e par {ctx.author}", icon_url=ctx.author.display_avatar.url)

    await ctx.send(embed=embed)

# Gestion des erreurs de permissions
@set_money.error
async def set_money_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.send("‚ùå Tu dois √™tre administrateur pour utiliser cette commande.")
    else:
        await ctx.send("‚ùå Une erreur est survenue.")

@bot.hybrid_command(name="pay", description="Paie un utilisateur avec tes coins.")
@app_commands.describe(user="L'utilisateur √† qui envoyer de l'argent", amount="Montant √† transf√©rer ou 'all' pour tout envoyer")
async def pay(ctx: commands.Context, user: discord.User, amount: str):
    sender = ctx.author
    guild_id = ctx.guild.id

    if user.id == sender.id:
        embed = discord.Embed(
            description=f"<:classic_x_mark:1362711858829725729> {sender.mention}, tu ne peux pas te payer toi-m√™me.",
            color=discord.Color.red()
        )
        embed.set_author(name=sender.display_name, icon_url=sender.display_avatar.url)
        return await ctx.send(embed=embed)

    sender_data = collection28.find_one({"guild_id": guild_id, "user_id": sender.id}) or {"cash": 0}
    sender_cash = int(sender_data.get("cash", 0))

    # Gestion du mot-cl√© "all"
    if amount.lower() == "all":
        if sender_cash <= 0:
            embed = discord.Embed(
                description=f"<:classic_x_mark:1362711858829725729> {sender.mention}, tu n'as pas d'argent √† envoyer.",
                color=discord.Color.red()
            )
            embed.set_author(name=sender.display_name, icon_url=sender.display_avatar.url)
            return await ctx.send(embed=embed)
        amount = sender_cash
    else:
        try:
            amount = int(amount)
            if amount <= 0:
                raise ValueError
        except ValueError:
            embed = discord.Embed(
                description=f"<:classic_x_mark:1362711858829725729> {sender.mention}, le montant doit √™tre un nombre positif ou 'all'.",
                color=discord.Color.red()
            )
            embed.set_author(name=sender.display_name, icon_url=sender.display_avatar.url)
            return await ctx.send(embed=embed)

        if sender_cash < amount:
            embed = discord.Embed(
                description=(
                    f"<:classic_x_mark:1362711858829725729> {sender.mention}, tu n'as pas assez de cash. "
                    f"Tu as actuellement <:emoji_48:1362489008130621542> **{sender_cash:,}** dans ton portefeuille."
                ),
                color=discord.Color.red()
            )
            embed.set_author(name=sender.display_name, icon_url=sender.display_avatar.url)
            return await ctx.send(embed=embed)

    # Mise √† jour des soldes
    collection28.update_one(
        {"guild_id": guild_id, "user_id": sender.id},
        {"$inc": {"cash": -amount}},
        upsert=True
    )

    collection28.update_one(
        {"guild_id": guild_id, "user_id": user.id},
        {"$inc": {"cash": amount}},
        upsert=True
    )

    # Log dans le salon √©conomique
    await log_eco_channel(
        bot,
        guild_id,
        user,
        "Paiement re√ßu",
        amount,
        None,
        None,
        f"{user.mention} a re√ßu **{amount:,} <:emoji_48:1362489008130621542>** de la part de {sender.mention}."
    )

    # Embed de succ√®s
    embed = discord.Embed(
        description=(
            f"<:Check:1362710665663615147> {user.mention} a re√ßu **{amount:,}** <:emoji_48:1362489008130621542> de ta part."
        ),
        color=discord.Color.green()
    )
    embed.set_author(name=sender.display_name, icon_url=sender.display_avatar.url)
    embed.set_footer(text=f"Paiement effectu√© √† {user.display_name}", icon_url=user.display_avatar.url)

    await ctx.send(embed=embed)

# Gestion des erreurs
@pay.error
async def pay_error(ctx, error):
    embed = discord.Embed(
        description="<:classic_x_mark:1362711858829725729> Une erreur est survenue lors du paiement.",
        color=discord.Color.red()
    )
    await ctx.send(embed=embed)

@bot.hybrid_command(name="work", aliases=["wk"], description="Travaille et gagne de l'argent !")
async def work(ctx: commands.Context):
    if ctx.guild is None:
        return await ctx.send("Cette commande ne peut √™tre utilis√©e qu'en serveur.")

    user = ctx.author
    guild_id = ctx.guild.id
    user_id = user.id

    # V√©rification que l'utilisateur a un r√¥le dans ECO_ROLES_VIP
    if not any(role.id in ECO_ROLES_VIP for role in user.roles):
        embed = discord.Embed(
            description=f"<:classic_x_mark:1362711858829725729> {user.mention}, cette commande est r√©serv√©e aux membres VIP.",
            color=discord.Color.red()
        )
        return await ctx.send(embed=embed)

    now = datetime.utcnow()

    # V√©rification du cooldown
    cooldown_data = collection33.find_one({"guild_id": guild_id, "user_id": user_id}) or {}
    last_work_time = cooldown_data.get("last_work_time")

    if last_work_time:
        time_diff = now - last_work_time
        cooldown = timedelta(hours=6)
        if time_diff < cooldown:
            remaining = cooldown - time_diff
            minutes_left = int(remaining.total_seconds() // 60)

            embed = discord.Embed(
                description=f"<:classic_x_mark:1362711858829725729> {user.mention}, tu dois attendre **{minutes_left} minutes** avant de pouvoir retravailler.",
                color=discord.Color.red()
            )
            embed.set_author(name=user.display_name, icon_url=user.display_avatar.url)
            return await ctx.send(embed=embed)

    # Gain al√©atoire
    amount = random.randint(1, 150)

    # R√©cup√©ration ou cr√©ation des donn√©es utilisateur
    user_data = collection28.find_one({"guild_id": guild_id, "user_id": user_id})
    if not user_data:
        user_data = {"guild_id": guild_id, "user_id": user_id, "cash": 1500, "bank": 0}
        collection28.insert_one(user_data)

    initial_cash = user_data.get("cash", 0)

    # Mise √† jour du cooldown
    collection33.update_one(
        {"guild_id": guild_id, "user_id": user_id},
        {"$set": {"last_work_time": now}},
        upsert=True
    )

    # Mise √† jour du cash
    collection28.update_one(
        {"guild_id": guild_id, "user_id": user_id},
        {"$inc": {"cash": amount}},
        upsert=True
    )

    # Log + messages vari√©s
    messages = [
        f"Tu as travaill√© dur et gagn√© **{amount:,} <:emoji_48:1362489008130621542>**. Bien jou√© !",
        f"Bravo ! Tu as gagn√© **{amount:,} <:emoji_48:1362489008130621542>** apr√®s ton travail.",
        f"Tu as travaill√© avec assiduit√© et r√©colt√© **{amount:,} <:emoji_48:1362489008130621542>**.",
        f"Du bon travail ! Voici **{amount:,} <:emoji_48:1362489008130621542>** pour toi.",
        f"F√©licitations, tu as gagn√© **{amount:,} <:emoji_48:1362489008130621542>** pour ton travail.",
        f"Tu as gagn√© **{amount:,} <:emoji_48:1362489008130621542>** apr√®s une journ√©e de travail bien remplie !",
        f"Bien jou√© ! **{amount:,} <:emoji_48:1362489008130621542>** ont √©t√© ajout√©s √† ta balance.",
        f"Voici ta r√©compense pour ton travail : **{amount:,} <:emoji_48:1362489008130621542>**.",
        f"Tu es pay√© pour ton dur labeur : **{amount:,} <:emoji_48:1362489008130621542>**.",
    ]
    message = random.choice(messages)

    # Log de l'action
    await log_eco_channel(
        bot,
        guild_id,
        user,
        "Travail effectu√©",
        amount,
        initial_cash,
        initial_cash + amount,
        f"{user.mention} a gagn√© **{amount:,} <:emoji_48:1362489008130621542>>** pour son travail."
    )

    # Embed de succ√®s
    embed = discord.Embed(
        description=message,
        color=discord.Color.green()
    )
    embed.set_author(name=user.display_name, icon_url=user.display_avatar.url)
    embed.set_footer(text="Commande de travail", icon_url=user.display_avatar.url)

    await ctx.send(embed=embed)
    
# Gestion des erreurs
@work.error
async def work_error(ctx, error):
    embed = discord.Embed(
        description="<:classic_x_mark:1362711858829725729> Une erreur est survenue lors de l'utilisation de la commande `work`.",
        color=discord.Color.red()
    )
    await ctx.send(embed=embed)

@bot.hybrid_command(name="slut", description="Tente ta chance dans une aventure sexy pour gagner de l'argent... ou tout perdre.")
async def slut(ctx: commands.Context):
    user = ctx.author
    guild_id = ctx.guild.id
    user_id = user.id
    now = datetime.utcnow()

    # V√©rification que l'utilisateur a un r√¥le dans ECO_ROLES_VIP
    if not any(role.id in ECO_ROLES_VIP for role in user.roles):
        embed = discord.Embed(
            description=f"<:classic_x_mark:1362711858829725729> {user.mention}, cette commande est r√©serv√©e aux membres VIP.",
            color=discord.Color.red()
        )
        return await ctx.send(embed=embed)
        
    # Cooldown 30 min
    cooldown_data = collection30.find_one({"guild_id": guild_id, "user_id": user_id}) or {}
    last_slut_time = cooldown_data.get("last_slut_time")

    if last_slut_time:
        time_diff = now - last_slut_time
        if time_diff < timedelta(hours=3):
            remaining = timedelta(hours=3) - time_diff
            minutes_left = int(remaining.total_seconds() // 60)
            return await ctx.send(f"<:classic_x_mark:1362711858829725729> Tu dois encore patienter **{minutes_left} minutes** avant de retenter une nouvelle aventure sexy.")

    # D√©terminer le r√©sultat
    outcome = random.choice(["gain", "loss"])
    amount_gain = random.randint(1, 75)
    amount_loss = random.randint(1, 75)

    # R√©cup√©rer ou cr√©er les donn√©es du joueur
    user_data = collection28.find_one({"guild_id": guild_id, "user_id": user_id})
    if not user_data:
        user_data = {"guild_id": guild_id, "user_id": user_id, "cash": 1500, "bank": 0}
        collection28.insert_one(user_data)

    balance_before = user_data.get("cash", 0)

    # V√©rifier si l'utilisateur a le r√¥le sp√©cial
    has_special_role = discord.utils.get(user.roles, id=1365313292477927464) is not None

    # Si gain ou r√¥le sp√©cial, on gagne
    if outcome == "gain" or has_special_role:
        message = random.choice([
            f"<:Check:1362710665663615147> Tu as s√©duit la bonne personne et re√ßu **{amount_gain} <:emoji_48:1362489008130621542>** en cadeau.",
            f"<:Check:1362710665663615147> Une nuit torride t‚Äôa valu **{amount_gain} <:emoji_48:1362489008130621542>**.",
            f"<:Check:1362710665663615147> Tu as √©t√© pay√© pour tes charmes : **{amount_gain} <:emoji_48:1362489008130621542>**.",
            f"<:Check:1362710665663615147> Ta prestation a fait des ravages, tu gagnes **{amount_gain} <:emoji_48:1362489008130621542>**.",
            f"<:Check:1362710665663615147> Ce client g√©n√©reux t‚Äôa offert **{amount_gain} <:emoji_48:1362489008130621542>**.",
            f"<:Check:1362710665663615147> Tu as chauff√© la salle et r√©colt√© **{amount_gain} <:emoji_48:1362489008130621542>**.",
            f"<:Check:1362710665663615147> Tes talents ont √©t√© r√©compens√©s avec **{amount_gain} <:emoji_48:1362489008130621542>**.",
            f"<:Check:1362710665663615147> Tu as domin√© la sc√®ne, et gagn√© **{amount_gain} <:emoji_48:1362489008130621542>**.",
        ])
        collection28.update_one(
            {"guild_id": guild_id, "user_id": user_id},
            {"$inc": {"cash": amount_gain}},
            upsert=True
        )
        balance_after = balance_before + amount_gain
        await log_eco_channel(bot, guild_id, user, "Gain apr√®s slut", amount_gain, balance_before, balance_after)

    else:
        message = random.choice([
            f"<:classic_x_mark:1362711858829725729> Ton plan a √©chou√©, tu perds **{amount_loss} <:emoji_48:1362489008130621542>**.",
            f"<:classic_x_mark:1362711858829725729> Ton client a disparu sans payer. Tu perds **{amount_loss} <:emoji_48:1362489008130621542>**.",
            f"<:classic_x_mark:1362711858829725729> T‚Äôas gliss√© pendant ton show‚Ä¶ R√©sultat : **{amount_loss} <:emoji_48:1362489008130621542>** de frais m√©dicaux.",
            f"<:classic_x_mark:1362711858829725729> Mauvais choix de client, il t‚Äôa vol√© **{amount_loss} <:emoji_48:1362489008130621542>**.",
            f"<:classic_x_mark:1362711858829725729> Une nuit sans succ√®s‚Ä¶ Tu perds **{amount_loss} <:emoji_48:1362489008130621542>**.",
            f"<:classic_x_mark:1362711858829725729> Ton charme n‚Äôa pas op√©r√©‚Ä¶ Pertes : **{amount_loss} <:emoji_48:1362489008130621542>**.",
            f"<:classic_x_mark:1362711858829725729> Tu as √©t√© arnaqu√© par un faux manager. Tu perds **{amount_loss} <:emoji_48:1362489008130621542>**.",
        ])
        collection28.update_one(
            {"guild_id": guild_id, "user_id": user_id},
            {"$inc": {"cash": -amount_loss}},
            upsert=True
        )
        balance_after = balance_before - amount_loss
        await log_eco_channel(bot, guild_id, user, "Perte apr√®s slut", -amount_loss, balance_before, balance_after)

    # Mise √† jour du cooldown
    collection30.update_one(
        {"guild_id": guild_id, "user_id": user_id},
        {"$set": {"last_slut_time": now}},
        upsert=True
    )

    # Envoi de l'embed
    embed = discord.Embed(
        title="üíã R√©sultat de ta prestation",
        description=message,
        color=discord.Color.green() if outcome == "gain" or has_special_role else discord.Color.dark_red()
    )
    embed.set_footer(text=f"Aventure tent√©e par {user}", icon_url=user.display_avatar.url)
    await ctx.send(embed=embed)

@slut.error
async def slut_error(ctx, error):
    await ctx.send("<:classic_x_mark:1362711858829725729> Une erreur est survenue pendant la commande.")

@bot.hybrid_command(name="crime", description="Participe √† un crime pour essayer de gagner de l'argent, mais attention, tu pourrais perdre !")
async def crime(ctx: commands.Context):
    user = ctx.author
    guild_id = ctx.guild.id
    user_id = user.id
    now = datetime.utcnow()

    # V√©rification que l'utilisateur a un r√¥le dans ECO_ROLES_VIP
    if not any(role.id in ECO_ROLES_VIP for role in user.roles):
        embed = discord.Embed(
            description=f"<:classic_x_mark:1362711858829725729> {user.mention}, cette commande est r√©serv√©e aux membres VIP.",
            color=discord.Color.red()
        )
        return await ctx.send(embed=embed)
        
    # Cooldown 30 minutes
    cooldown_data = collection31.find_one({"guild_id": guild_id, "user_id": user_id}) or {}
    last_crime_time = cooldown_data.get("last_crime_time")

    if last_crime_time:
        time_diff = now - last_crime_time
        if time_diff < timedelta(hours=1):
            remaining = timedelta(hours=1) - time_diff
            minutes_left = int(remaining.total_seconds() // 60)
            return await ctx.send(f"<:classic_x_mark:1362711858829725729> Tu dois attendre encore **{minutes_left} minutes** avant de pouvoir recommencer.")

    outcome = random.choice(["gain", "loss"])
    gain_amount = random.randint(1, 50)
    loss_amount = random.randint(1, 50)

    # R√©cup√©rer ou cr√©er les donn√©es joueur
    user_data = collection28.find_one({"guild_id": guild_id, "user_id": user_id})
    if not user_data:
        user_data = {"guild_id": guild_id, "user_id": user_id, "cash": 1500, "bank": 0}
        collection28.insert_one(user_data)

    balance_before = user_data.get("cash", 0)

    # R√¥le sp√©cial : ne perd jamais
    has_special_role = any(role.id == 1365313292477927464 for role in user.roles)

    if outcome == "gain" or has_special_role:
        messages = [
            f"Tu as braqu√© une banque sans te faire rep√©rer et gagn√© **{gain_amount} <:emoji_48:1362489008130621542>**.",
            f"Tu as vol√© une mallette pleine de billets ! Gain : **{gain_amount} <:emoji_48:1362489008130621542>**.",
            f"Ton casse a √©t√© un succ√®s, tu empoche **{gain_amount} <:emoji_48:1362489008130621542>**.",
            f"Tu as braqu√© une bijouterie et revendu le tout pour **{gain_amount} <:emoji_48:1362489008130621542>**.",
            f"Le vol de voiture a pay√© ! Tu gagnes **{gain_amount} <:emoji_48:1362489008130621542>**.",
            f"Tu as escroqu√© un riche touriste : **{gain_amount} <:emoji_48:1362489008130621542>**.",
            f"Ton hacking a fonctionn√©, transfert r√©ussi de **{gain_amount} <:emoji_48:1362489008130621542>**.",
        ]
        message = random.choice(messages)

        collection28.update_one(
            {"guild_id": guild_id, "user_id": user_id},
            {"$inc": {"cash": gain_amount}},
            upsert=True
        )

        balance_after = balance_before + gain_amount
        await log_eco_channel(bot, guild_id, user, "Gain apr√®s crime", gain_amount, balance_before, balance_after)

        embed = discord.Embed(
            title="üí∏ Tu as r√©ussi ton crime !",
            description=message,
            color=discord.Color.green()
        )

    else:
        messages = [
            f"Tu t‚Äôes fait attraper par la police et tu perds **{loss_amount} <:emoji_48:1362489008130621542>** en caution.",
            f"Ton complice t‚Äôa trahi et s‚Äôest enfui avec **{loss_amount} <:emoji_48:1362489008130621542>**.",
            f"Le syst√®me de s√©curit√© t‚Äôa eu, tu paies **{loss_amount} <:emoji_48:1362489008130621542>**.",
            f"Le plan a foir√©, tu dois rembourser **{loss_amount} <:emoji_48:1362489008130621542>**.",
            f"La victime t‚Äôa reconnu, tu files une amende de **{loss_amount} <:emoji_48:1362489008130621542>**.",
            f"Un pi√®ge de la police t‚Äôa co√ªt√© **{loss_amount} <:emoji_48:1362489008130621542>**.",
            f"Tu t‚Äôes bless√© pendant le casse. Soins : **{loss_amount} <:emoji_48:1362489008130621542>**.",
        ]
        message = random.choice(messages)

        collection28.update_one(
            {"guild_id": guild_id, "user_id": user_id},
            {"$inc": {"cash": -loss_amount}},
            upsert=True
        )

        balance_after = balance_before - loss_amount
        await log_eco_channel(bot, guild_id, user, "Perte apr√®s crime", -loss_amount, balance_before, balance_after)

        embed = discord.Embed(
            title="üö® √âchec du crime !",
            description=message,
            color=discord.Color.red()
        )

    # Mise √† jour cooldown
    collection31.update_one(
        {"guild_id": guild_id, "user_id": user_id},
        {"$set": {"last_crime_time": now}},
        upsert=True
    )
    embed.set_footer(text=f"Action effectu√©e par {user}", icon_url=user.display_avatar.url)
    await ctx.send(embed=embed)

@crime.error
async def crime_error(ctx, error):
    await ctx.send("<:classic_x_mark:1362711858829725729> Une erreur est survenue lors de la commande.")

@bot.command(name="buy", aliases=["chicken", "c", "h", "i", "k", "e", "n"])
async def buy_item(ctx, item: str = "chicken"):
    user = ctx.author
    guild_id = ctx.guild.id
    user_id = user.id

    item = "chicken"  # Forcer l'achat du chicken

    # V√©rifier si l'utilisateur poss√®de d√©j√† un chicken
    data = collection34.find_one({"guild_id": guild_id, "user_id": user_id})
    if data and data.get("chicken", False):
        embed = discord.Embed(
            description="<:classic_x_mark:1362711858829725729> Vous poss√©dez d√©j√† un chicken.\nEnvoyez-le au combat avec la commande `cock-fight <pari>`.",
            color=discord.Color.red()
        )
        embed.set_author(name=f"{user.display_name}", icon_url=user.display_avatar.url)
        await ctx.send(embed=embed)
        return

    # V√©rifier le solde (champ cash)
    balance_data = collection28.find_one({"guild_id": guild_id, "user_id": user_id})
    balance = balance_data.get("cash", 0) if balance_data else 0

    items_for_sale = {
        "chicken": 10,
    }

    if item in items_for_sale:
        price = items_for_sale[item]

        if balance >= price:
            # Retirer du cash
            collection28.update_one(
                {"guild_id": guild_id, "user_id": user_id},
                {"$inc": {"cash": -price}},
                upsert=True
            )

            # Ajouter le chicken
            collection34.update_one(
                {"guild_id": guild_id, "user_id": user_id},
                {"$set": {item: True}},
                upsert=True
            )

            # Logs √©conomiques
            balance_after = balance - price
            await log_eco_channel(
                bot, guild_id, user, "Achat", price, balance, balance_after,
                f"Achat d'un **{item}**"
            )

            # Embed de confirmation
            embed = discord.Embed(
                description="<:Check:1362710665663615147> Vous avez achet√© un chicken pour combattre !\nUtilisez la commande `cock-fight <pari>`",
                color=discord.Color.green()
            )
            embed.set_author(name=f"{user.display_name}", icon_url=user.display_avatar.url)
            await ctx.send(embed=embed)

        else:
            embed = discord.Embed(
                description=f"<:classic_x_mark:1362711858829725729> Vous n'avez pas assez de coins pour acheter un **{item}** !",
                color=discord.Color.red()
            )
            embed.set_author(name=f"{user.display_name}", icon_url=user.display_avatar.url)
            await ctx.send(embed=embed)

    else:
        embed = discord.Embed(
            description=f"<:classic_x_mark:1362711858829725729> Cet item n'est pas disponible √† l'achat.",
            color=discord.Color.red()
        )
        embed.set_author(name=f"{user.display_name}", icon_url=user.display_avatar.url)
        await ctx.send(embed=embed)

@bot.command(name="cock-fight", aliases=["cf"])
async def cock_fight(ctx, amount: str):
    user = ctx.author
    guild_id = ctx.guild.id
    user_id = user.id

    config = get_cf_config(guild_id)
    max_bet = config.get("max_bet", 500)
    max_chance = config.get("max_chance", 52)
    start_chance = config.get("start_chance", 45)

    # V√©rifier si l'utilisateur a un chicken
    data = collection34.find_one({"guild_id": guild_id, "user_id": user_id})
    if not data or not data.get("chicken", False):
        embed = discord.Embed(
            description=f"<:classic_x_mark:1362711858829725729> {user.mention}, tu n'as pas de poulet ! Utilise la commande `!!buy chicken` pour en acheter un.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
        return

    # V√©rifier le solde de l'utilisateur
    balance_data = collection28.find_one({"guild_id": guild_id, "user_id": user_id})
    balance = balance_data.get("cash", 0) if balance_data else 0

    # G√©rer les mises "all" ou "half"
    if amount.lower() == "all":
        if balance == 0:
            embed = discord.Embed(
                description=f"<:classic_x_mark:1362711858829725729> {user.mention}, ton cash est vide.",
                color=discord.Color.red()
            )
            await ctx.send(embed=embed)
            return
        if balance > max_bet:
            embed = discord.Embed(
                description=f"<:classic_x_mark:1362711858829725729> {user.mention}, ta mise d√©passe la limite de **{max_bet} <:emoji_48:1362489008130621542>**.",
                color=discord.Color.red()
            )
            await ctx.send(embed=embed)
            return
        amount = balance

    elif amount.lower() == "half":
        if balance == 0:
            embed = discord.Embed(
                description=f"<:classic_x_mark:1362711858829725729> {user.mention}, ton cash est vide.",
                color=discord.Color.red()
            )
            await ctx.send(embed=embed)
            return
        amount = balance // 2
        if amount > max_bet:
            embed = discord.Embed(
                description=f"<:classic_x_mark:1362711858829725729> {user.mention}, la moiti√© de ton cash d√©passe la limite de **{max_bet} <:emoji_48:1362489008130621542>**.",
                color=discord.Color.red()
            )
            await ctx.send(embed=embed)
            return

    else:
        try:
            amount = int(amount)
        except ValueError:
            embed = discord.Embed(
                description=f"<:classic_x_mark:1362711858829725729> {user.mention}, entre un montant valide, ou utilise `all` ou `half`.",
                color=discord.Color.red()
            )
            await ctx.send(embed=embed)
            return

    # V√©rifier que l'utilisateur a assez d'argent
    if amount > balance:
        embed = discord.Embed(
            description=f"<:classic_x_mark:1362711858829725729> {user.mention}, tu n'as pas assez de cash pour cette mise.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
        return
    if amount <= 0:
        embed = discord.Embed(
            description=f"<:classic_x_mark:1362711858829725729> {user.mention}, la mise doit √™tre positive.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
        return
    if amount > max_bet:
        embed = discord.Embed(
            description=f"<:classic_x_mark:1362711858829725729> {user.mention}, la mise est limit√©e √† **{max_bet} <:emoji_48:1362489008130621542>**.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
        return

    # Chance de victoire
    win_data = collection33.find_one({"guild_id": guild_id, "user_id": user_id})
    win_chance = (win_data or {}).get("win_chance", start_chance)

    did_win = random.randint(1, 100) <= win_chance

    if did_win:
        win_amount = amount
        new_chance = min(win_chance + 1, max_chance)

        # Mise √† jour de la base
        collection28.update_one(
            {"guild_id": guild_id, "user_id": user_id},
            {"$inc": {"cash": win_amount}},
            upsert=True
        )
        collection33.update_one(
            {"guild_id": guild_id, "user_id": user_id},
            {"$set": {"win_chance": new_chance}},
            upsert=True
        )

        # Embed victoire
        embed = discord.Embed(
            description=f"<:Check:1362710665663615147> {user.mention}, ton poulet a **gagn√©** le combat et t‚Äôa rapport√© <:emoji_48:1362489008130621542> **{win_amount}** ! üêì",
            color=discord.Color.green()
        )
        embed.set_author(name=str(user), icon_url=user.avatar.url if user.avatar else user.default_avatar.url)

        embed.set_footer(text=f"Chicken strength (chance of winning): {new_chance}%")

        await ctx.send(embed=embed)

        balance_after = balance + win_amount
        await log_eco_channel(
            bot, guild_id, user, "Victoire au Cock-Fight", win_amount, balance, balance_after,
            f"Victoire au Cock-Fight avec un gain de **{win_amount}**"
        )

    else:
        # D√©faite : poulet meurt
        collection34.update_one(
            {"guild_id": guild_id, "user_id": user_id},
            {"$set": {"chicken": False}}
        )
        collection28.update_one(
            {"guild_id": guild_id, "user_id": user_id},
            {"$inc": {"cash": -amount}},
            upsert=True
        )
        collection33.update_one(
            {"guild_id": guild_id, "user_id": user_id},
            {
                "$set": {"win_chance": start_chance},
            },
            upsert=True
        )

        embed = discord.Embed(
            description=f"<:classic_x_mark:1362711858829725729> {user.mention}, ton poulet est **mort** au combat... <:imageremovebgpreview53:1362693948702855360>",
            color=discord.Color.red()
        )
        embed.set_author(name=str(user), icon_url=user.avatar.url if user.avatar else user.default_avatar.url)
        await ctx.send(embed=embed)

        balance_after = balance - amount
        await log_eco_channel(
            bot, guild_id, user, "D√©faite au Cock-Fight", -amount, balance, balance_after,
            f"D√©faite au Cock-Fight avec une perte de **{amount}**"
        )

@bot.command(name="set-cf-depart-chance")
@commands.has_permissions(administrator=True)
async def set_depart_chance(ctx, pourcent: str = None):
    if pourcent is None:
        return await ctx.send("‚ö†Ô∏è Merci de sp√©cifier un pourcentage (entre 1 et 100). Exemple : `!set-cf-depart-chance 50`")

    if not pourcent.isdigit():
        return await ctx.send("‚ö†Ô∏è Le pourcentage doit √™tre un **nombre entier**.")

    pourcent = int(pourcent)
    if not 1 <= pourcent <= 100:
        return await ctx.send("‚ùå Le pourcentage doit √™tre compris entre **1** et **100**.")

    # Mettre √† jour la base de donn√©es avec la nouvelle valeur
    collection35.update_one({"guild_id": ctx.guild.id}, {"$set": {"start_chance": pourcent}}, upsert=True)

    # Envoyer un message dans le salon de log sp√©cifique (si configur√©)
    config = collection36.find_one({"guild_id": ctx.guild.id})
    channel_id = config.get("eco_log_channel") if config else None

    if channel_id:
        channel = bot.get_channel(channel_id)
        if channel:
            embed = discord.Embed(
                title="üîß Log de Configuration",
                color=discord.Color.green(),
                timestamp=datetime.utcnow()
            )
            embed.add_field(name="Action", value="Mise √† jour de la chance de d√©part", inline=True)
            embed.add_field(name="Chance de d√©part", value=f"{pourcent}%", inline=True)
            await channel.send(embed=embed)

    await ctx.send(f"‚úÖ La chance de d√©part a √©t√© mise √† **{pourcent}%**.")


@bot.command(name="set-cf-max-chance")
@commands.has_permissions(administrator=True)
async def set_max_chance(ctx, pourcent: str = None):
    if pourcent is None:
        return await ctx.send("‚ö†Ô∏è Merci de sp√©cifier un pourcentage (entre 1 et 100). Exemple : `!set-cf-max-chance 90`")

    if not pourcent.isdigit():
        return await ctx.send("‚ö†Ô∏è Le pourcentage doit √™tre un **nombre entier**.")

    pourcent = int(pourcent)
    if not 1 <= pourcent <= 100:
        return await ctx.send("‚ùå Le pourcentage doit √™tre compris entre **1** et **100**.")

    # Mettre √† jour la base de donn√©es avec la nouvelle valeur
    collection35.update_one({"guild_id": ctx.guild.id}, {"$set": {"max_chance": pourcent}}, upsert=True)

    # Envoyer un message dans le salon de log sp√©cifique (si configur√©)
    config = collection36.find_one({"guild_id": ctx.guild.id})
    channel_id = config.get("eco_log_channel") if config else None

    if channel_id:
        channel = bot.get_channel(channel_id)
        if channel:
            embed = discord.Embed(
                title="üîß Log de Configuration",
                color=discord.Color.green(),
                timestamp=datetime.utcnow()
            )
            embed.add_field(name="Action", value="Mise √† jour de la chance maximale de victoire", inline=True)
            embed.add_field(name="Chance maximale", value=f"{pourcent}%", inline=True)
            await channel.send(embed=embed)

    await ctx.send(f"‚úÖ La chance maximale de victoire est maintenant de **{pourcent}%**.")

@bot.command(name="set-cf-mise-max")
@commands.has_permissions(administrator=True)
async def set_max_mise(ctx, amount: str = None):
    if amount is None:
        return await ctx.send("‚ö†Ô∏è Merci de sp√©cifier une mise maximale (nombre entier positif). Exemple : `!set-cf-mise-max 1000`")

    if not amount.isdigit():
        return await ctx.send("‚ö†Ô∏è La mise maximale doit √™tre un **nombre entier**.")

    amount = int(amount)
    if amount <= 0:
        return await ctx.send("‚ùå La mise maximale doit √™tre un **nombre sup√©rieur √† 0**.")

    # Mettre √† jour la base de donn√©es avec la nouvelle mise maximale
    collection35.update_one({"guild_id": ctx.guild.id}, {"$set": {"max_bet": amount}}, upsert=True)

    # Envoyer un message dans le salon de log sp√©cifique (si configur√©)
    config = collection36.find_one({"guild_id": ctx.guild.id})
    channel_id = config.get("eco_log_channel") if config else None

    if channel_id:
        channel = bot.get_channel(channel_id)
        if channel:
            embed = discord.Embed(
                title="üîß Log de Configuration",
                color=discord.Color.green(),
                timestamp=datetime.utcnow()
            )
            embed.add_field(name="Action", value="Mise √† jour de la mise maximale", inline=True)
            embed.add_field(name="Mise maximale", value=f"{amount} <:emoji_48:1362489008130621542>", inline=True)
            await channel.send(embed=embed)

    await ctx.send(f"‚úÖ La mise maximale a √©t√© mise √† **{amount} <:emoji_48:1362489008130621542>**.")

# Gestion des erreurs li√©es aux permissions
@set_depart_chance.error
@set_max_chance.error
@set_max_mise.error
async def cf_config_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.send("‚ùå Vous n'avez pas la permission d'utiliser cette commande.")
    elif isinstance(error, commands.CommandInvokeError):
        await ctx.send("‚ùå Une erreur est survenue lors de l‚Äôex√©cution de la commande.")
        print(f"[ERREUR] {error}")
    else:
        await ctx.send("‚ö†Ô∏è Une erreur inconnue est survenue.")
        print(f"[ERREUR INCONNUE] {error}")

class CFConfigView(ui.View):
    def __init__(self, guild_id):
        super().__init__(timeout=60)
        self.guild_id = guild_id

    @ui.button(label="üîÑ Reset aux valeurs par d√©faut", style=discord.ButtonStyle.red)
    async def reset_defaults(self, interaction: Interaction, button: ui.Button):
        # V√©rifier si l'utilisateur est admin
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message("Tu n'as pas la permission de faire √ßa.", ephemeral=True)
            return

        # Reset config
        default_config = {
            "start_chance": 50,
            "max_chance": 100,
            "max_bet": 20000
        }
        collection35.update_one(
            {"guild_id": self.guild_id},
            {"$set": default_config},
            upsert=True
        )
        await interaction.response.send_message("‚úÖ Les valeurs par d√©faut ont √©t√© r√©tablies.", ephemeral=True)

@bot.command(name="cf-config")
@commands.has_permissions(administrator=True)
async def cf_config(ctx):
    guild_id = ctx.guild.id
    config = get_cf_config(guild_id)

    start_chance = config.get("start_chance", 50)
    max_chance = config.get("max_chance", 100)
    max_bet = config.get("max_bet", 20000)

    embed = discord.Embed(
        title="‚öôÔ∏è Configuration Cock-Fight",
        color=discord.Color.gold()
    )
    embed.add_field(name="üéØ Chance de d√©part", value=f"**{start_chance}%**", inline=False)
    embed.add_field(name="üìà Chance max", value=f"**{max_chance}%**", inline=False)
    embed.add_field(name="üí∞ Mise maximale", value=f"**{max_bet} <:ecoEther:1341862366249357374>**", inline=False)
    embed.set_footer(text=f"Demand√© par {ctx.author.display_name}", icon_url=ctx.author.avatar.url if ctx.author.avatar else None)

    await ctx.send(embed=embed, view=CFConfigView(guild_id))

@bot.command(name="set-eco-log")
@commands.has_permissions(administrator=True)
async def set_eco_log(ctx, channel: discord.TextChannel):
    guild_id = ctx.guild.id
    collection36.update_one(
        {"guild_id": guild_id},
        {"$set": {"eco_log_channel": channel.id}},
        upsert=True
    )
    await ctx.send(f"‚úÖ Les logs √©conomiques seront envoy√©s dans {channel.mention}")

# Fonction pour r√©cup√©rer ou cr√©er les donn√©es utilisateur
def get_or_create_user_data(guild_id: int, user_id: int):
    data = collection28.find_one({"guild_id": guild_id, "user_id": user_id})
    if not data:
        data = {"guild_id": guild_id, "user_id": user_id, "cash": 1500, "bank": 0}
        collection28.insert_one(data)
    return data

@bot.hybrid_command(name="rob", description="Voler entre 30% et 80% du portefeuille d'un autre utilisateur.")
async def rob(ctx, user: discord.User):
    guild_id = ctx.guild.id
    user_id = ctx.author.id
    target_id = user.id

    if user.bot or user_id == target_id:
        reason = "Tu ne peux pas voler un bot." if user.bot else "Tu ne peux pas voler des coins √† toi-m√™me."
        embed = discord.Embed(description=reason, color=discord.Color.red())
        embed.set_author(name=ctx.author.display_name, icon_url=ctx.author.avatar.url)
        return await ctx.send(embed=embed)

    # Cooldown check
    last_rob = collection41.find_one({"guild_id": guild_id, "user_id": user_id})
    if last_rob and (last_rob_time := last_rob.get("last_rob")):
        time_left = last_rob_time + timedelta(hours=1) - datetime.utcnow()
        if time_left > timedelta(0):
            mins, secs = divmod(int(time_left.total_seconds()), 60)
            hrs, mins = divmod(mins, 60)
            time_str = f"{hrs}h {mins}min" if hrs else f"{mins}min"
            embed = discord.Embed(
                description=f"‚è≥ Attends encore **{time_str}** avant de pouvoir voler √† nouveau.",
                color=discord.Color.red()
            )
            embed.set_author(name=ctx.author.display_name, icon_url=ctx.author.avatar.url)
            return await ctx.send(embed=embed)

    # R√©cup√©ration du membre cible
    target_member = ctx.guild.get_member(target_id)
    if not target_member:
        return await ctx.send(embed=discord.Embed(
            description=f"Utilisateur introuvable sur ce serveur.",
            color=discord.Color.red()
        ))

    # Anti rob par r√¥les stock√©s dans MongoDB
    anti_rob_data = collection42.find_one({"guild_id": guild_id}) or {"roles": []}
    if any(role.name in anti_rob_data["roles"] for role in target_member.roles):
        return await ctx.send(embed=discord.Embed(
            description=f"{user.display_name} est prot√©g√© contre le vol.",
            color=discord.Color.red()
        ))

    # V√©rifier si la cible a le r√¥le qui repousse les vols (300% banque)
    has_anti_rob_reflect = discord.utils.get(target_member.roles, id=1365313284584116264)
    user_data = collection28.find_one({"guild_id": guild_id, "user_id": user_id}) or {"cash": 1500, "bank": 0}
    if has_anti_rob_reflect:
        penalty = round(user_data["bank"] * 3.00, 2)
        penalty = min(penalty, user_data["bank"])
        collection.update_one({"guild_id": guild_id, "user_id": user_id}, {"$inc": {"bank": -penalty}})

        await log_eco_channel(bot, guild_id, ctx.author, "Vol repouss√©", -penalty, user_data["bank"], user_data["bank"] - penalty, f"Repouss√© par {user.display_name}")

        return await ctx.send(embed=discord.Embed(
            description=f"‚ö†Ô∏è {user.display_name} a tent√© de voler **{target_member.display_name}**, mais a √©t√© **repouss√© par une aura protectrice** !\n"
                        f"üí∏ Il perd **{int(penalty)}** coins de sa banque !",
            color=discord.Color.red()
        ).set_author(name=ctx.author.display_name, icon_url=ctx.author.avatar.url))

    # Data utilisateur/target
    target_data = collection28.find_one({"guild_id": guild_id, "user_id": target_id}) or {"cash": 1500, "bank": 0}
    collection.update_one({"guild_id": guild_id, "user_id": user_id}, {"$setOnInsert": user_data}, upsert=True)
    collection.update_one({"guild_id": guild_id, "user_id": target_id}, {"$setOnInsert": target_data}, upsert=True)

    if target_data["cash"] <= 0:
        return await ctx.send(embed=discord.Embed(
            description=f"{user.display_name} n‚Äôa pas de monnaie √† voler.",
            color=discord.Color.red()
        ))
    # Calcul succ√®s du vol
    robber_total = user_data["cash"] + user_data["bank"]
    rob_chance = max(80 - (robber_total // 1000), 10)
    success = random.randint(1, 100) <= rob_chance

    # Enregistrement du cooldown
    collection41.update_one(
        {"guild_id": guild_id, "user_id": user_id},
        {"$set": {"last_rob": datetime.utcnow()}},
        upsert=True
    )

    if success:
        percentage = random.randint(30, 80)
        stolen = (percentage / 100) * target_data["cash"]

        if has_half_rob_protection:
            stolen /= 2

        # Limiter √† 30% si protection active
        if has_30_percent_protection:
            max_stealable = target_data["cash"] * 0.30
            stolen = min(stolen, max_stealable)

        stolen = round(stolen, 2)
        stolen = min(stolen, target_data["cash"])
        initial_stolen = stolen

        # Application du vol
        collection28.update_one({"guild_id": guild_id, "user_id": user_id}, {"$inc": {"cash": stolen}})
        collection28.update_one({"guild_id": guild_id, "user_id": target_id}, {"$inc": {"cash": -stolen}})

        # Contre-attaque si r√¥le
        if has_counter_role:
            counter_amount = round(initial_stolen * 2, 2)
            collection28.update_one({"guild_id": guild_id, "user_id": user_id}, {"$inc": {"cash": -counter_amount}})
            collection28.update_one({"guild_id": guild_id, "user_id": target_id}, {"$inc": {"cash": counter_amount}})

            new_cash = user_data["cash"] - counter_amount
            await log_eco_channel(bot, guild_id, ctx.author, "Contre-vol subi", -counter_amount, user_data["cash"], new_cash, f"Contre-attaque de {user.display_name}")
            await log_eco_channel(bot, guild_id, target_member, "Contre-vol r√©ussi", counter_amount, target_data["cash"], target_data["cash"] + counter_amount, f"Contre-attaque sur {ctx.author.display_name}")

            return await ctx.send(embed=discord.Embed(
                description=f"üî• Mauvais choix ! {user.display_name} a √©t√© **contre-attaqu√©** et a perdu **{int(counter_amount)}** ‚Äî il est maintenant **dans le n√©gatif** !",
                color=discord.Color.red()
            ).set_author(name=ctx.author.display_name, icon_url=ctx.author.avatar.url))

        await log_eco_channel(bot, guild_id, ctx.author, "Vol", stolen, user_data["cash"], user_data["cash"] + stolen, f"Vol√© √† {user.display_name}")

        return await ctx.send(embed=discord.Embed(
            description=f"<:emoji_48:1362489008130621542> Tu as vol√© **{int(stolen)}** √† **{user.display_name}** !",
            color=discord.Color.green()
        ).set_author(name=ctx.author.display_name, icon_url=ctx.author.avatar.url))

    else:
        percentage = random.uniform(1, 5)
        loss = (percentage / 100) * user_data["cash"]
        loss = round(loss, 2)
        loss = min(loss, user_data["cash"])

        collection28.update_one({"guild_id": guild_id, "user_id": user_id}, {"$inc": {"cash": -loss}})

        await log_eco_channel(bot, guild_id, ctx.author, "√âchec vol", -loss, user_data["cash"], user_data["cash"] - loss, f"√âchec de vol sur {user.display_name}")

        return await ctx.send(embed=discord.Embed(
            description=f"üö® Tu as √©chou√© et perdu **{int(loss)}** !",
            color=discord.Color.red()
        ).set_author(name=ctx.author.display_name, icon_url=ctx.author.avatar.url))

@bot.command(name="set-anti_rob")
async def set_anti_rob(ctx):
    if not ctx.author.guild_permissions.administrator:
        return await ctx.send(embed=discord.Embed(
            description="Tu n'as pas la permission d'ex√©cuter cette commande.",
            color=discord.Color.red()
        ))

    guild_id = ctx.guild.id
    data = collection42.find_one({"guild_id": guild_id}) or {"guild_id": guild_id, "roles": []}
    anti_rob_roles = data["roles"]

    embed = discord.Embed(
        title="üîê Gestion des r√¥les anti-rob",
        description="Choisis une action √† effectuer ci-dessous.\n\n"
                    "**R√¥les actuellement prot√©g√©s :**\n"
                    f"{', '.join(anti_rob_roles) if anti_rob_roles else 'Aucun r√¥le prot√©g√©.'}",
        color=discord.Color.blurple()
    )

    class ActionSelect(Select):
        def __init__(self):
            options = [
                discord.SelectOption(label="Ajouter un r√¥le", value="add", emoji="‚úÖ"),
                discord.SelectOption(label="Supprimer un r√¥le", value="remove", emoji="‚ùå")
            ]
            super().__init__(
                placeholder="Choisis une action",
                min_values=1,
                max_values=1,
                options=options
            )

        async def callback(self, interaction: discord.Interaction):
            if interaction.user != ctx.author:
                return await interaction.response.send_message("Cette interaction ne t'est pas destin√©e.", ephemeral=True)

            await interaction.response.send_message(
                f"Tu as choisi **{self.values[0]}**. Merci de **mentionner un r√¥le** dans le chat.",
                ephemeral=True
            )

            def check(msg):
                return msg.author == ctx.author and msg.channel == ctx.channel and msg.role_mentions

            try:
                msg = await bot.wait_for("message", timeout=30.0, check=check)
                role = msg.role_mentions[0]
                role_name = role.name

                if self.values[0] == "add":
                    if role_name in anti_rob_roles:
                        await ctx.send(f"üî∏ Le r√¥le **{role_name}** est d√©j√† prot√©g√©.")
                    else:
                        anti_rob_roles.append(role_name)
                        await ctx.send(f"‚úÖ Le r√¥le **{role_name}** a √©t√© ajout√© √† la protection anti-rob.")
                elif self.values[0] == "remove":
                    if role_name in anti_rob_roles:
                        anti_rob_roles.remove(role_name)
                        await ctx.send(f"‚ùå Le r√¥le **{role_name}** a √©t√© retir√© de la protection anti-rob.")
                    else:
                        await ctx.send(f"üî∏ Le r√¥le **{role_name}** n‚Äôest pas prot√©g√©.")

                # Mise √† jour BDD
                collection42.update_one({"guild_id": guild_id}, {"$set": {"roles": anti_rob_roles}}, upsert=True)

            except asyncio.TimeoutError:
                await ctx.send("‚è±Ô∏è Temps √©coul√©. Merci de r√©essayer.")

    view = View()
    view.add_item(ActionSelect())
    await ctx.send(embed=embed, view=view)

@bot.hybrid_command(
    name="set-rr-limite",
    description="Fixe une limite de mise pour la roulette russe. (Admin seulement)"
)
@commands.has_permissions(administrator=True)  # Permet uniquement aux admins de modifier la limite
async def set_rr_limite(ctx: commands.Context, limite: int):
    if limite <= 0:
        return await ctx.send("La limite de mise doit √™tre un nombre positif.")
    
    guild_id = ctx.guild.id

    # Mettre √† jour la limite dans la collection info_rr
    collection38.update_one(
        {"guild_id": guild_id},
        {"$set": {"rr_limite": limite}},
        upsert=True  # Si la donn√©e n'existe pas, elle sera cr√©√©e
    )

    await ctx.send(f"La limite de mise pour la roulette russe a √©t√© fix√©e √† {limite:,} coins.")

active_rr_games = {}

@bot.command(aliases=["rr"])
async def russianroulette(ctx, arg: str):
    guild_id = ctx.guild.id
    user = ctx.author

    # Fonction pour r√©cup√©rer le cash
    def get_user_cash(guild_id: int, user_id: int):
        data = collection28.find_one({"guild_id": guild_id, "user_id": user_id})
        if data:
            return data.get("cash", 0)
        return 0

    # Fonction pour cr√©er ou r√©cup√©rer les donn√©es utilisateur
    def get_or_create_user_data(guild_id, user_id):
        data = collection28.find_one({"guild_id": guild_id, "user_id": user_id})
        if not data:
            data = {"guild_id": guild_id, "user_id": user_id, "cash": 1500, "bank": 0}
            collection28.insert_one(data)
        return data

    # Fonction pour parser le montant avec notation exponentielle (ex: 5e2 -> 500)
    def parse_mise(mise):
        match = re.match(r"(\d+)e(\d+)", mise)
        if match:
            base = int(match.group(1))
            exponent = int(match.group(2))
            return base * (10 ** exponent)
        else:
            return int(mise)

    if arg.isdigit() or arg.lower() == "all" or arg.lower() == "half":
        if arg.lower() == "all":
            bet = get_user_cash(guild_id, user.id)
        elif arg.lower() == "half":
            bet = get_user_cash(guild_id, user.id) // 2
        else:
            try:
                bet = parse_mise(arg)  # Utilisation de la fonction parse_mise
            except ValueError:
                return await ctx.send(embed=discord.Embed(
                    description=f"<:classic_x_mark:1362711858829725729> La mise sp√©cifi√©e est invalide.",
                    color=discord.Color.from_rgb(255, 92, 92)
                ))

        if bet < 1:
            return await ctx.send(embed=discord.Embed(
                description=f"<:classic_x_mark:1362711858829725729> La mise minimale est de 1 coin.",
                color=discord.Color.from_rgb(255, 92, 92)
            ))

        if bet > 10000:
            return await ctx.send(embed=discord.Embed(
                description=f"<:classic_x_mark:1362711858829725729> La mise maximale autoris√©e est de 10,000 coins.",
                color=discord.Color.from_rgb(255, 92, 92)
            ))

        user_cash = get_user_cash(guild_id, user.id)

        if bet > user_cash:
            return await ctx.send(embed=discord.Embed(
                description=f"<:classic_x_mark:1362711858829725729> Tu n'as pas assez de cash pour cette mise. Tu as {user_cash} coins.",
                color=discord.Color.from_rgb(255, 92, 92)
            ))

        if guild_id in active_rr_games:
            game = active_rr_games[guild_id]
            if user in game["players"]:
                return await ctx.send(embed=discord.Embed(
                    description=f"<:classic_x_mark:1362711858829725729> Tu as d√©j√† rejoint cette partie.",
                    color=discord.Color.from_rgb(255, 92, 92)
                ))
            if bet != game["bet"]:
                return await ctx.send(embed=discord.Embed(
                    description=f"<:classic_x_mark:1362711858829725729> Tu dois miser exactement {game['bet']} coins pour rejoindre cette partie.",
                    color=discord.Color.from_rgb(255, 92, 92)
                ))
            game["players"].append(user)
            return await ctx.send(embed=discord.Embed(
                description=f"{user.mention} a rejoint cette partie de Roulette Russe avec une mise de <:ecoEther:1341862366249357374> {bet}.",
                color=0x00FF00
            ))

        else:
            embed = discord.Embed(
                title="Nouvelle partie de Roulette Russe",
                description="> Pour d√©marrer cette partie : `!!rr start`\n"
                            "> Pour rejoindre : `!!rr <montant>`\n\n"
                            "**Temps restant :** 5 minutes ou 5 joueurs maximum",
                color=discord.Color.from_rgb(100, 140, 230)
            )
            msg = await ctx.send(embed=embed)

            active_rr_games[guild_id] = {
                "starter": user,
                "bet": bet,
                "players": [user],
                "message_id": msg.id
            }

            async def cancel_rr():
                await asyncio.sleep(300)
                if guild_id in active_rr_games and len(active_rr_games[guild_id]["players"]) == 1:
                    await ctx.send(embed=discord.Embed(
                        description="<:classic_x_mark:1362711858829725729> Personne n'a rejoint la roulette russe. La partie est annul√©e.",
                        color=discord.Color.from_rgb(255, 92, 92)
                    ))
                    del active_rr_games[guild_id]

            active_rr_games[guild_id]["task"] = asyncio.create_task(cancel_rr())

    elif arg.lower() == "start":
        game = active_rr_games.get(guild_id)
        if not game:
            return await ctx.send(embed=discord.Embed(
                description="<:classic_x_mark:1362711858829725729> Aucune partie en cours.",
                color=discord.Color.from_rgb(240, 128, 128)
            ))
        if game["starter"] != user:
            return await ctx.send(embed=discord.Embed(
                description="<:classic_x_mark:1362711858829725729> Seul le cr√©ateur de la partie peut la d√©marrer.",
                color=discord.Color.from_rgb(255, 92, 92)
            ))

        if len(game["players"]) < 2:
            await ctx.send(embed=discord.Embed(
                description="<:classic_x_mark:1362711858829725729> Pas assez de joueurs pour d√©marrer. La partie est annul√©e.",
                color=discord.Color.from_rgb(255, 92, 92)
            ))
            game["task"].cancel()
            del active_rr_games[guild_id]
            return

        # D√©but du jeu
        await ctx.send(embed=discord.Embed(
            description="<:Check:1362710665663615147> La roulette russe commence...",
            color=0x00FF00
        ))
        await asyncio.sleep(1)

        eliminated = random.choice(game["players"])
        survivors = [p for p in game["players"] if p != eliminated]

        # Phase 1 : qui meurt
        embed1 = discord.Embed(
            description=f"{eliminated.display_name} tire... et se fait avoir <:imageremovebgpreview53:1362693948702855360>",
            color=discord.Color.from_rgb(255, 92, 92)
        )
        await ctx.send(embed=embed1)
        await asyncio.sleep(1)

        # Phase 2 : les survivants
        result_embed = discord.Embed(
            title="Survivants de la Roulette Russe",
            description="\n".join([f"{p.mention} remporte <:emoji_48:1362489008130621542> {game['bet'] * 2}" for p in survivors]),
            color=0xFF5C5C
        )
        await ctx.send(embed=result_embed)

        # Distribution des gains
        for survivor in survivors:
            data = get_or_create_user_data(guild_id, survivor.id)
            data["cash"] += game["bet"] * 2  # Leur propre mise + celle du perdant
            collection28.update_one(
                {"guild_id": guild_id, "user_id": survivor.id},
                {"$set": {"cash": int(data["cash"])}}  # Arrondir le cash des survivants
            )

        # Retirer la mise au perdant
        loser_data = get_or_create_user_data(guild_id, eliminated.id)
        loser_data["cash"] -= game["bet"]
        collection28.update_one(
            {"guild_id": guild_id, "user_id": eliminated.id},
            {"$set": {"cash": int(loser_data["cash"])}}  # Arrondir le cash du perdant
        )

        # Suppression de la partie
        game["task"].cancel()
        del active_rr_games[guild_id]

    else:
        await ctx.send(embed=discord.Embed(
            description="Utilise `!!rr <montant>` pour lancer ou rejoindre une roulette russe.",
            color=discord.Color.from_rgb(255, 92, 92)
        ))
#-------------------------------------------------------------- Daily

@bot.hybrid_command(name="daily", aliases=["dy"], description="R√©clame tes Coins quotidiens.")
async def daily(ctx: commands.Context):
    if ctx.guild is None:
        return await ctx.send("Cette commande ne peut √™tre utilis√©e qu'en serveur.")
    
    guild_id = ctx.guild.id
    user_id = ctx.author.id
    now = datetime.utcnow()

    cooldown_data = collection29.find_one({"guild_id": guild_id, "user_id": user_id})
    cooldown_duration = timedelta(hours=24)

    if cooldown_data and "last_claim" in cooldown_data:
        last_claim = cooldown_data["last_claim"]
        next_claim = last_claim + cooldown_duration

        if now < next_claim:
            remaining = next_claim - now
            hours, remainder = divmod(remaining.seconds, 3600)
            minutes, seconds = divmod(remainder, 60)

            cooldown_embed = discord.Embed(
                description=f"<:classic_x_mark:1362711858829725729> Vous devez attendre encore "
                            f"**{remaining.days * 24 + hours} heures, {minutes} minutes et {seconds} secondes** "
                            f"avant de pouvoir recevoir vos Coins quotidiens.",
                color=discord.Color.red()
            )
            return await ctx.send(embed=cooldown_embed)

    # G√©n√©ration du montant (retirer la d√©cimale)
    amount = int(random.randint(1, 100))

    # R√©cup√©ration ou cr√©ation du document utilisateur
    user_data = collection28.find_one({"guild_id": guild_id, "user_id": user_id})
    if not user_data:
        user_data = {"guild_id": guild_id, "user_id": user_id, "cash": 1500, "bank": 0}
        collection28.insert_one(user_data)

    # Mise √† jour du solde
    old_cash = user_data["cash"]
    new_cash = old_cash + amount
    collection28.update_one(
        {"guild_id": guild_id, "user_id": user_id},
        {"$inc": {"cash": amount}}
    )

    # Mise √† jour du cooldown
    collection29.update_one(
        {"guild_id": guild_id, "user_id": user_id},
        {"$set": {"last_claim": now}},
        upsert=True
    )

    # Embed de succ√®s
    success_embed = discord.Embed(
        description=f"<:emoji_48:1362489008130621542> Vous avez re√ßu vos **{amount}** Coins quotidiens.\n"
                    f"Votre prochaine r√©compense sera disponible dans **24 heures**.",
        color=discord.Color.green()
    )
    await ctx.send(embed=success_embed)

    # Log
    await log_eco_channel(
        bot=bot,
        guild_id=guild_id,
        user=ctx.author,
        action="R√©compense quotidienne",
        amount=amount,
        balance_before=old_cash,
        balance_after=new_cash,
        note="Commande /daily"
    )
#----------------------------------------------------- Leaderbaord

@bot.hybrid_command(
    name="leaderboard",
    aliases=["lb"],
    description="Affiche le classement des plus riches"
)
@app_commands.describe(sort="Choisir le crit√®re de classement: 'cash' pour l'argent, 'bank' pour la banque, ou 'total' pour la somme des deux.")
@app_commands.choices(
    sort=[
        app_commands.Choice(name="Cash", value="cash"),
        app_commands.Choice(name="Banque", value="bank"),
        app_commands.Choice(name="Total", value="total")
    ]
)
async def leaderboard(
    ctx: commands.Context,
    sort: Optional[str] = "total"
):
    if ctx.guild is None:
        return await ctx.send("Cette commande ne peut √™tre utilis√©e qu'en serveur.")

    guild_id = ctx.guild.id
    emoji_currency = "<:emoji_48:1362489008130621542>"
    bank_logo = "https://github.com/Iseyg91/Isey_aime_Cass/blob/main/1344747420159967293.png?raw=true"

    # D√©tection du tri via arguments dans le message
    if isinstance(ctx, commands.Context) and ctx.message.content:
        content = ctx.message.content.lower()
        if "-cash" in content:
            sort = "cash"
        elif "-bank" in content:
            sort = "bank"
        else:
            sort = "total"

    if sort == "cash":
        sort_key = lambda u: u.get("cash", 0)
        title = f"Leaderboard - Cash"
    elif sort == "bank":
        sort_key = lambda u: u.get("bank", 0)
        title = f"Leaderboard - Banque"
    else:
        sort_key = lambda u: u.get("cash", 0) + u.get("bank", 0)
        title = f"Leaderboard - Total"

    all_users_data = list(collection28.find({"guild_id": guild_id}))
    sorted_users = sorted(all_users_data, key=sort_key, reverse=True)

    page_size = 10
    total_pages = (len(sorted_users) + page_size - 1) // page_size

    def get_page(page_num: int):
        start_index = page_num * page_size
        end_index = start_index + page_size
        users_on_page = sorted_users[start_index:end_index]

        embed = discord.Embed(color=discord.Color.blue())
        embed.set_author(name="Leaderboard", icon_url=bank_logo)

        lines = []
        for i, user_data in enumerate(users_on_page, start=start_index + 1):
            user_id = user_data.get("user_id")
            if not user_id:
                continue
            user = ctx.guild.get_member(user_id)
            name = user.display_name if user else f"Utilisateur {user_id}"
            cash = user_data.get("cash", 0)
            bank = user_data.get("bank", 0)
            total = cash + bank

            # Formater les montants pour enlever les d√©cimales
            if sort == "cash":
                amount = int(cash)
            elif sort == "bank":
                amount = int(bank)
            else:
                amount = int(total)

            line = f"{str(i).rjust(2)}. `{name}` ‚Ä¢ {emoji_currency} {amount:,}"
            lines.append(line)

        embed.add_field(name=title, value="\n".join(lines), inline=False)

        author_data = collection28.find_one({"guild_id": guild_id, "user_id": ctx.author.id})
        user_rank = next((i + 1 for i, u in enumerate(sorted_users) if u["user_id"] == ctx.author.id), None)
        embed.set_footer(text=f"Page {page_num + 1}/{total_pages}  ‚Ä¢  Ton rang: {user_rank}")
        return embed

    class LeaderboardView(View):
        def __init__(self, page_num):
            super().__init__(timeout=60)
            self.page_num = page_num

        @discord.ui.button(label="‚¨ÖÔ∏è Pr√©c√©dent", style=discord.ButtonStyle.primary)
        async def previous_page(self, interaction: discord.Interaction, button: Button):
            if self.page_num > 0:
                self.page_num -= 1
                embed = get_page(self.page_num)
                await interaction.response.edit_message(embed=embed, view=self)

        @discord.ui.button(label="‚û°Ô∏è Suivant", style=discord.ButtonStyle.primary)
        async def next_page(self, interaction: discord.Interaction, button: Button):
            if self.page_num < total_pages - 1:
                self.page_num += 1
                embed = get_page(self.page_num)
                await interaction.response.edit_message(embed=embed, view=self)

    view = LeaderboardView(0)
    embed = get_page(0)
    await ctx.send(embed=embed, view=view)

#----------------------------------------------- Collect

@bot.hybrid_command(
    name="collect-income",
    aliases=["collect"],
    description="Collecte tes revenus associ√©s √† tes r√¥les sp√©ciaux, si le cooldown est termin√©."
)
async def collect_income(ctx: commands.Context):
    member = ctx.author
    guild = ctx.guild
    now = datetime.utcnow()
    collected = []
    cooldowns = []

    for config in COLLECT_ROLES_CONFIG:
        role = guild.get_role(config["role_id"])
        if role is None or config.get("auto", False):
            continue

        if role not in member.roles:
            continue

        # V√©rifie le cooldown
        cd_data = collection32.find_one({
            "guild_id": guild.id,
            "user_id": member.id,
            "role_id": role.id
        })
        last_collect = cd_data.get("last_collect") if cd_data else None

        try:
            if last_collect:
                elapsed = (now - last_collect).total_seconds()
                if elapsed < config["cooldown"]:
                    remaining = config["cooldown"] - elapsed
                    cooldowns.append((remaining, role))
                    continue
        except Exception as e:
            print(f"[DEBUG] Erreur sur cooldown pour {role.name}: {e}")

        # Traitement √©co
        eco_data = collection28.find_one({
            "guild_id": guild.id,
            "user_id": member.id
        }) or {"guild_id": guild.id, "user_id": member.id, "cash": 1500, "bank": 0}

        amount = config.get("amount", 0)
        target = config.get("target", "cash")
        eco_data[target] = eco_data.get(target, 0) + amount

        collection28.update_one(
            {"guild_id": guild.id, "user_id": member.id},
            {"$set": {target: eco_data[target]}},
            upsert=True
        )

        collection32.update_one(
            {"guild_id": guild.id, "user_id": member.id, "role_id": role.id},
            {"$set": {"last_collect": now}},
            upsert=True
        )

        collected.append(f"{role.mention} | <:emoji_48:1362489008130621542>**{amount}** ({target})")

        await log_eco_channel(
            bot, guild.id, member,
            f"Collect ({role.name})", amount, eco_data[target] - amount, eco_data[target],
            note=f"Collect manuel ‚Üí {target}"
        )

    if collected:
        embed = discord.Embed(
            title=f"{member.display_name}",
            description="<:Check:1362710665663615147> Revenus collect√©s avec succ√®s !\n\n" + "\n".join(collected),
            color=discord.Color.green()
        )
        embed.set_thumbnail(url=member.display_avatar.url)
        await ctx.send(embed=embed)
        return

    if cooldowns:
        shortest = min(cooldowns, key=lambda x: x[0])
        remaining_minutes = int(shortest[0] // 60) or 1
        embed = discord.Embed(
            title="‚è≥ Collect en cooldown",
            description=f"Tu dois attendre encore **{remaining_minutes} min** pour le r√¥le {shortest[1].mention}.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
        return

    await ctx.send("Tu n'as aucun r√¥le collect actif ou tous sont en cooldown.")

@bot.hybrid_command(name="staff-pay", description="Verse les salaires aux staffs selon leurs r√¥les.")
async def staff_pay(ctx):
    if ctx.author.id != ISEY_ID:
        return await ctx.send("Tu n'as pas la permission d'utiliser cette commande.", ephemeral=True)

    if ctx.guild is None:
        return await ctx.send("Cette commande doit √™tre utilis√©e dans un serveur.")

    guild = ctx.guild
    paid_users = []

    for member in guild.members:
        highest_pay = 0

        # Cherche le plus haut salaire selon les r√¥les
        for role_id, pay in ROLE_PAY.items():
            role = guild.get_role(role_id)
            if role and role in member.roles:
                if pay > highest_pay:
                    highest_pay = pay

        if highest_pay > 0:
            # Connexion Mongo
            user_data = collection.find_one({"guild_id": guild.id, "user_id": member.id})
            if not user_data:
                user_data = {"guild_id": guild.id, "user_id": member.id, "cash": 1500, "bank": 0}
                collection.insert_one(user_data)

            # Ajoute le salaire
            collection28.update_one(
                {"guild_id": guild.id, "user_id": member.id},
                {"$inc": {"bank": highest_pay}}
            )
            paid_users.append((member, highest_pay))

    # Embed de confirmation
    embed = discord.Embed(
        title="Versement des Salaires",
        description=f"{len(paid_users)} membres ont √©t√© pay√©s avec succ√®s.",
        color=discord.Color.green()
    )
    embed.set_image(url="https://ma-vie-administrative.fr/wp-content/uploads/2019/04/Bulletin-de-paie-electronique-un-atout-pour-les-ressources-humaines.jpg")

    # Petit r√©sum√©
    if paid_users:
        details = ""
        for user, amount in paid_users:
            details += f"**{user.display_name}** ‚ûî {amount:,} coins\n"

        # Si trop de texte (> 1024 caract√®res), on ne l'affiche pas pour √©viter les erreurs
        if len(details) < 1024:
            embed.add_field(name="D√©tails des paiements", value=details, inline=False)

    await ctx.send(embed=embed)

# Token pour d√©marrer le bot (√† partir des secrets)
# Lancer le bot avec ton token depuis l'environnement  
keep_alive()
bot.run(token)
